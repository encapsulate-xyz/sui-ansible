global
    log /dev/log	local0
    log /dev/log	local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

defaults
    log	global
    mode	http
    option	httplog
    option	dontlognull

    timeout queue 2s
    timeout connect 2s
    timeout client  5s
    timeout server  30s
    timeout client-fin 5s
    timeout server-fin 2s

    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

frontend stats
    bind *:{{ sui[type].ports.ha_proxy_metrics_port }}
    mode http
    http-request use-service prometheus-exporter if { path /metrics }
    stats uri /
    stats show-legends
    no log

frontend testnet-validator-frontend
    bind :{{ sui[type].ports.ha_proxy_frontend_port }} proto h2

    # Define ACLs for allowed and blocked IP addresses
    acl allowed_ips src -f /etc/haproxy/allowed_ips.txt
    acl blocked_ips src -f /etc/haproxy/blocked_ips.txt

    # Set real client IP in X-Forwarded-For
    http-request set-header X-Forwarded-For %[src]

    # Silently drop TCP connections from blocked IPs
    tcp-request connection silent-drop if blocked_ips

    # Limit incoming TCP connections to 5 per second per source IP (excluding allowed IP addresses)
    tcp-request connection track-sc0 src if !allowed_ips
    tcp-request connection reject if { sc_conn_rate(0) gt 5 }

    # Limit incoming HTTP requests to 500 per second per source IP (excluding allowed IP addresses)
    stick-table type ipv6 size 256k expire 5m store http_req_rate(10s)
    http-request track-sc1 src if !allowed_ips
    http-request deny deny_status 429 if { sc_http_req_rate(1) gt 5000 }

    default_backend testnet-validator-backend

backend testnet-validator-backend
    server sui-node 127.0.0.1:{{ sui[type].ports.network_address_port }} check proto h2
